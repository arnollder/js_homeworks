// ===========
// проверка типа всех переменных на число
let errorMessage;

function checkNums(...args) {
    for (let value of args) {
        if (typeof value != "number") {
            errorMessage = "Допустимо только числовое значение!";
            return false;
        }
    }
    return true;
}
// проверка номера дня недели
function checkDayOfWeek(num) {
    if (num < 1 || num > 7) {
        errorMessage = "Допустимо только число в диапазоне от 1 до 7!";
        return false;
    }
    return true;
}

// =============================================================
// 1. Сделайте функцию, которая возвращает квадрат числа. Число
// передается параметром.
// =============================================================

{
    function square(num) {
        return num ** 2;
    }
    console.log(square(2));
}

{
    const square = function (num) {
        return num ** 2;
    };
    console.log(square(2));
}

{
    const square = (num) => num ** 2;
    console.log(square(2));
}

// Дальше я решил повыпендриваться и добавил проверку по типу переменной
{
    function square(num) {
        if (checkNums(num)) {
            return num ** 2;
        } else return errorMessage;
    }
    console.log(square(2));
}

// Если return нельзя использовать внутри тернарного оператора, то я решил использовать тернарный оператор внутри return
{
    const square = function (num) {
        return checkNums(num) ? num ** 2 : errorMessage;
    };
    console.log(square(2));
}

// Вот так вообще круто, но тяжело к прочтению.......
{
    const square = (num) => (checkNums(num) ? num ** 2 : errorMessage);
    console.log(square(2));
}

// ==========================================================
// 2. Сделайте функцию, которая возвращает сумму двух чисел.
// ==========================================================

{
    function sum(a, b) {
        return checkNums(a, b) ? a + b : errorMessage;
    }
    console.log(sum(1, 9));
}

{
    const sum = function (a, b) {
        return checkNums(a, b) ? a + b : errorMessage;
    };
    console.log(sum(1, 9));
}

{
    const sum = (a, b) => (checkNums(a, b) ? a + b : errorMessage);
    console.log(sum(1, 9));
}

// =================================================================================
// 3. Сделайте функцию, которая отнимает от первого числа второе и делит на третье.
// =================================================================================

{
    const myCalc = function (a, b, c) {
        return checkNums(a, b, c) ? (a - b) / c : errorMessage;
    };
    console.log(myCalc(10, 1, 3));
}

{
    const myCalc = (a, b, c) => (checkNums(a, b, c) ? (a - b) / c : errorMessage);
    console.log(myCalc(10, 1, 3));
}

// =============================================================
// 4. Сделайте функцию, которая принимает параметром число от 1
// до 7, а возвращает день недели на русском языке.
// =============================================================

{
    const dayOfWeek = function (num) {
        if (checkNums(num) && checkDayOfWeek(num)) {
            const listDays = [
                "Понедельник",
                "Вторник",
                "Среда",
                "Четверг",
                "Пятница",
                "Суббота",
                "Воскресенье",
            ];
            return listDays[num - 1];
        } else return errorMessage;
    };
    console.log(dayOfWeek(5));
}

{
    const listDays = [
        "Понедельник",
        "Вторник",
        "Среда",
        "Четверг",
        "Пятница",
        "Суббота",
        "Воскресенье",
    ];
    const dayOfWeek = (num) =>
        checkNums(num) && checkDayOfWeek(num) ? listDays[num - 1] : errorMessage;

    console.log(dayOfWeek(6));
}

// 5. Сделайте функцию, которая параметрами принимает 2 числа.
// Если эти числа равны - пусть функция вернет true, а если не
// равны - false.
// 6. Сделайте функцию, которая параметрами принимает 2 числа.
// Если их сумма больше 10 - пусть вернет true, а если нет то -
// false.
// 7. Сделайте функцию, которая параметром принимает число и
// проверяет - отрицательное оно или нет. Если отрицательное -
// пусть функция вернет true, а если нет - false.
// 8. Сделайте функцию isNumberInRange, которая параметром
// принимает число и проверяет, что оно больше нуля и меньше
// 10. Если это так - пусть функция возвращает true, если не так -
// false.
// 9. *Сделайте функцию getDigitsSum (digit - это цифра), которая
// параметром принимает целое число и возвращает сумму его
// цифр.
// 10. *Найдите все года от 1 до 2020, сумма цифр которых равна
// 13. Для этого используйте вспомогательную функцию
// getDigitsSum из предыдущей задачи.
// 11. Сделайте функцию isEven() (even - это четный), которая
// параметром принимает целое число и проверяет: четное оно
// или нет. Если четное - пусть функция возвращает true, если
// нечетное - false.
// 12. *Дано число. Сложите его цифры. Если сумма получилась
// более 9-ти, опять сложите его цифры. И так, пока сумма не
// станет однозначным числом (9 и менее). Можно использовать
// функцию getDigitsSum из 9 задачи
// 13. * Напишите стрелочную функцию, которая будет
// возвращать true если строка является палиндромом и false в
// противном случае.
